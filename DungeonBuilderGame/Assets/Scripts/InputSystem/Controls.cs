//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""764d9143-8ee5-46a0-8158-6d26e9295e08"",
            ""actions"": [
                {
                    ""name"": ""ActionButton"",
                    ""type"": ""Button"",
                    ""id"": ""6d0d41bf-95d6-4631-8b4b-3a80e505dc5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveNorth"",
                    ""type"": ""Button"",
                    ""id"": ""f1f69c3b-e9f1-459d-81a6-cb36b7374ca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveEast"",
                    ""type"": ""Button"",
                    ""id"": ""3d6311b6-42a7-4c4c-945f-bc6974f9f654"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveWest"",
                    ""type"": ""Button"",
                    ""id"": ""ed4c5cd1-bff9-4088-8f04-42b17cd812ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveSouth"",
                    ""type"": ""Button"",
                    ""id"": ""31edb279-63f9-4399-a16b-53d81fc3d36a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aefa311c-10ef-4169-ab0e-b3e0c5b2f1eb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e69b2f2c-6d51-422a-9d92-46ac430c8bb7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KBM"",
                    ""action"": ""ActionButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2689180-3657-4a99-8ea8-bc51abd7f60a"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveNorth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74446b6a-e7d7-41c1-8a4e-673455ebdf5e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveEast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95048673-e060-4f5b-b9f7-75fc52cdfe0c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveWest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6986210a-4490-4267-b3c8-5471ebe59781"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveSouth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LobbyControls"",
            ""id"": ""358cc3ca-7ffb-420a-ae59-35d581df8104"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""2715836e-1467-4f5e-a9bd-c3697c3613b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e4c03b6-d134-4bec-9a96-f0c5d0764577"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_ActionButton = m_PlayerControls.FindAction("ActionButton", throwIfNotFound: true);
        m_PlayerControls_MoveNorth = m_PlayerControls.FindAction("MoveNorth", throwIfNotFound: true);
        m_PlayerControls_MoveEast = m_PlayerControls.FindAction("MoveEast", throwIfNotFound: true);
        m_PlayerControls_MoveWest = m_PlayerControls.FindAction("MoveWest", throwIfNotFound: true);
        m_PlayerControls_MoveSouth = m_PlayerControls.FindAction("MoveSouth", throwIfNotFound: true);
        // LobbyControls
        m_LobbyControls = asset.FindActionMap("LobbyControls", throwIfNotFound: true);
        m_LobbyControls_StartGame = m_LobbyControls.FindAction("StartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_ActionButton;
    private readonly InputAction m_PlayerControls_MoveNorth;
    private readonly InputAction m_PlayerControls_MoveEast;
    private readonly InputAction m_PlayerControls_MoveWest;
    private readonly InputAction m_PlayerControls_MoveSouth;
    public struct PlayerControlsActions
    {
        private @Controls m_Wrapper;
        public PlayerControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActionButton => m_Wrapper.m_PlayerControls_ActionButton;
        public InputAction @MoveNorth => m_Wrapper.m_PlayerControls_MoveNorth;
        public InputAction @MoveEast => m_Wrapper.m_PlayerControls_MoveEast;
        public InputAction @MoveWest => m_Wrapper.m_PlayerControls_MoveWest;
        public InputAction @MoveSouth => m_Wrapper.m_PlayerControls_MoveSouth;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @ActionButton.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnActionButton;
                @ActionButton.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnActionButton;
                @ActionButton.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnActionButton;
                @MoveNorth.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveNorth;
                @MoveNorth.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveNorth;
                @MoveNorth.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveNorth;
                @MoveEast.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveEast;
                @MoveEast.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveEast;
                @MoveEast.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveEast;
                @MoveWest.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveWest;
                @MoveWest.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveWest;
                @MoveWest.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveWest;
                @MoveSouth.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveSouth;
                @MoveSouth.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveSouth;
                @MoveSouth.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMoveSouth;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActionButton.started += instance.OnActionButton;
                @ActionButton.performed += instance.OnActionButton;
                @ActionButton.canceled += instance.OnActionButton;
                @MoveNorth.started += instance.OnMoveNorth;
                @MoveNorth.performed += instance.OnMoveNorth;
                @MoveNorth.canceled += instance.OnMoveNorth;
                @MoveEast.started += instance.OnMoveEast;
                @MoveEast.performed += instance.OnMoveEast;
                @MoveEast.canceled += instance.OnMoveEast;
                @MoveWest.started += instance.OnMoveWest;
                @MoveWest.performed += instance.OnMoveWest;
                @MoveWest.canceled += instance.OnMoveWest;
                @MoveSouth.started += instance.OnMoveSouth;
                @MoveSouth.performed += instance.OnMoveSouth;
                @MoveSouth.canceled += instance.OnMoveSouth;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // LobbyControls
    private readonly InputActionMap m_LobbyControls;
    private ILobbyControlsActions m_LobbyControlsActionsCallbackInterface;
    private readonly InputAction m_LobbyControls_StartGame;
    public struct LobbyControlsActions
    {
        private @Controls m_Wrapper;
        public LobbyControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_LobbyControls_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_LobbyControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LobbyControlsActions set) { return set.Get(); }
        public void SetCallbacks(ILobbyControlsActions instance)
        {
            if (m_Wrapper.m_LobbyControlsActionsCallbackInterface != null)
            {
                @StartGame.started -= m_Wrapper.m_LobbyControlsActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_LobbyControlsActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_LobbyControlsActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_LobbyControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public LobbyControlsActions @LobbyControls => new LobbyControlsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KBMSchemeIndex = -1;
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    public interface IPlayerControlsActions
    {
        void OnActionButton(InputAction.CallbackContext context);
        void OnMoveNorth(InputAction.CallbackContext context);
        void OnMoveEast(InputAction.CallbackContext context);
        void OnMoveWest(InputAction.CallbackContext context);
        void OnMoveSouth(InputAction.CallbackContext context);
    }
    public interface ILobbyControlsActions
    {
        void OnStartGame(InputAction.CallbackContext context);
    }
}
